generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model carts {
  cartId    Int      @id @default(autoincrement())
  userEmail String   @db.VarChar(100)
  itemId    Int
  qty       Int      @default(0)
  isPaid    Boolean  @default(false)
  items     items    @relation(fields: [itemId], references: [itemId], map: "Carts_itemId_fkey")
  accounts  accounts @relation(fields: [userEmail], references: [email], map: "Carts_userEmail_fkey")

  @@index([itemId], map: "fk_carts_items_idx")
  @@index([userEmail], map: "fk_carts_users_idx")
}

model favprd {
  userEmail String   @db.VarChar(100)
  itemId    Int
  items     items    @relation(fields: [itemId], references: [itemId], map: "FavPrd_itemId_fkey")
  accounts  accounts @relation(fields: [userEmail], references: [email], map: "FavPrd_userEmail_fkey")

  @@id([itemId, userEmail])
  @@index([itemId], map: "fk_FavPRD_items1_idx")
  @@index([userEmail], map: "fk_FavPRD_users1_idx")
}

model items {
  itemId       Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  description  String         @db.VarChar(500)
  itemOwner    String
  items        accounts       @relation(fields: [itemOwner], references: [email], map: "Items_itemOwner_fkey")
  type         String         @db.VarChar(20)
  tag          String         @db.VarChar(500)
  totalRating  Decimal        @default(0.0) @db.Decimal(2, 1)
  sold         Int            @default(0)
  price        Decimal        @default(0.00) @db.Decimal(32, 2)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  carts        carts[]
  favprd       favprd[]
  item_reviews item_reviews[]

  @@index([itemId], map: "fk_items_users1_idx")
}

model item_details {
  itemId       Int
  style        String  @db.VarChar(50)
  size         String  @db.VarChar(500)
  isOutOfStock Boolean @default(false)

  @@id([itemId, style])
  @@index([itemId], map: "fk_ItemDetail_items_idx")
}

model item_reviews {
  itemReviewId      String              @id @db.VarChar(32)
  itemId            Int
  userEmail         String              @db.VarChar(100)
  items             items               @relation(fields: [itemId], references: [itemId], map: "ItemReview_itemId_fkey")
  accounts          accounts            @relation(fields: [userEmail], references: [email], map: "Itemreview_userEmail_fkey")
  comment           String              @db.VarChar(500)
  rating            Int                 @default(0)
  like              Int                 @default(0)
  size              String              @db.Char(100)
  style             String              @db.VarChar(50)
  createdAt         DateTime            @default(now())
  item_review_likes item_review_likes[]
}

model item_review_likes {
  userEmail    String       @db.VarChar(100)
  itemReviewId String       @db.VarChar(32)
  item_reviews item_reviews @relation(fields: [itemReviewId], references: [itemReviewId], map: "UserreviewLike_itemreviewId_fkey")
  accounts     accounts     @relation(fields: [userEmail], references: [email], map: "UserreviewLike_userEmail_fkey")

  @@id([itemReviewId, userEmail])
  @@index([itemReviewId], map: "fk_UserReviewLike_items_review1_idx")
  @@index([userEmail], map: "fk_UserReviewLike_users1_idx")
}

model accounts {
  userId    Int      @id @default(autoincrement())
  firstname String?  @db.VarChar(50)
  lastname  String?  @db.VarChar(50)
  email     String   @unique(map: "Users_email_key") @db.VarChar(100)
  password  String   @db.VarChar(100)
  role      String   @default("user") @db.VarChar(11)
  status    Boolean  @default(true)
  phone     String?  @db.Char(11)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carts             carts[]
  favprd            favprd[]
  items             items[]
  item_reviews      item_reviews[]
  item_review_likes item_review_likes[]
}
