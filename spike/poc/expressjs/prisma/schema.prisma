generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model carts {
  cartId    String    @id @db.VarChar(53)
  sessionId String    @db.VarChar(53)
  itemId    Int
  itemStyle String    @db.VarChar(50)
  itemSize  String    @db.VarChar(50)
  qty       Int       @default(0)
  item_sku  item_sku  @relation(fields: [itemId, itemStyle], references: [itemId, SKUstyle], map: "Carts_item_sku_fkey")
  createdAt DateTime  @default(dbgenerated("NOW()"))
  updatedAt DateTime? @default(dbgenerated("NOW()"))

  sessions session_cart @relation(fields: [sessionId], references: [sessionCartId], map: "Carts_session_fkey")
}

model session_cart {
  sessionCartId String    @id @db.VarChar(53)
  username      String    @db.VarChar(20)
  createdAt     DateTime  @default(dbgenerated("NOW()"))
  updatedAt     DateTime? @default(dbgenerated("NOW()"))
  accounts      accounts  @relation(fields: [username], references: [username], map: "Session_cart_username_fkey")

  carts carts[]
}

model favprd {
  username String   @db.VarChar(100)
  itemId   Int
  items    items    @relation(fields: [itemId], references: [itemId], map: "FavPrd_itemId_fkey")
  accounts accounts @relation(fields: [username], references: [username], map: "FavPrd_username_fkey")

  @@id([itemId, username])
  @@index([itemId], map: "fk_FavPRD_items1_idx")
  @@index([username], map: "fk_FavPRD_users1_idx")
}

model items {
  itemId        Int             @id @default(autoincrement())
  name          String          @db.VarChar(100)
  description   String          @db.VarChar(5000)
  itemOwner     String
  accounts      accounts        @relation(fields: [itemOwner], references: [username], map: "Items_itemOwner_fkey")
  type          String          @db.VarChar(20)
  tag           String          @db.VarChar(500)
  totalRating   Decimal         @default(0.0) @db.Decimal(2, 1)
  minPrice      Decimal         @default(0.00) @db.Decimal(32, 2)
  maxPrice      Decimal?        @db.Decimal(32, 2)
  createdAt     DateTime        @default(dbgenerated("NOW()"))
  updatedAt     DateTime?       @default(dbgenerated("NOW()"))
  favprd        favprd[]
  item_sku      item_sku[]
  item_events   item_events[]
  item_reviews  item_reviews[]
  order_details order_details[]

  @@index([itemOwner], map: "fk_items_users1_idx")
}

model item_sku {
  itemId       Int
  items        items          @relation(fields: [itemId], references: [itemId], map: "Item_sku_itemId_fkey")
  SKUstyle     String         @default("No") @db.VarChar(20)
  item_details item_details[]
  carts        carts[]

  @@id([itemId, SKUstyle])
  @@index([itemId, SKUstyle], map: "fk_ItemSKU_items_idx")
}

model item_details {
  itemId   Int
  style    String   @default("No") @db.VarChar(50)
  item_sku item_sku @relation(fields: [itemId, style], references: [itemId, SKUstyle], map: "Item_details_sku_fkey")
  stock    Int      @default(0)
  size     String   @default("No") @db.VarChar(50)
  price    Decimal  @default(0.00) @db.Decimal(32, 2)

  @@id([itemId, style, size])
  @@index([itemId, style, size], map: "fk_ItemDetail_items_idx")
}

model item_events {
  timestamp DateTime @id @default(now())
  userId    Int
  itemId    Int
  items     items    @relation(fields: [itemId], references: [itemId], map: "EventItem_itemId_fkey")
  accounts  accounts @relation(fields: [userId], references: [userId], map: "EventItem_username_fkey")
  itemEvent String   @db.Char(4)
}

model item_reviews {
  itemReviewId      String              @id @db.VarChar(53)
  itemId            Int
  username          String              @db.VarChar(20)
  items             items               @relation(fields: [itemId], references: [itemId], map: "ItemReview_itemId_fkey")
  accounts          accounts            @relation(fields: [username], references: [username], map: "ItemReview_username_fkey")
  comment           String              @db.VarChar(500)
  PQrating          Int                 @default(0)
  SSrating          Int                 @default(0)
  DSrating          Int                 @default(0)
  like              Int                 @default(0)
  style             String              @db.VarChar(50)
  size              String              @default("No") @db.VarChar(50)
  createdAt         DateTime            @default(dbgenerated("NOW()"))
  updatedAt         DateTime?           @default(dbgenerated("NOW()"))
  item_review_likes item_review_likes[]

  @@index([itemId, style, size], map: "fk_ItemReview_items_idx")
}

model item_review_likes {
  username     String       @db.VarChar(20)
  itemReviewId String       @db.VarChar(53)
  item_reviews item_reviews @relation(fields: [itemReviewId], references: [itemReviewId], map: "UserreviewLike_itemreviewId_fkey")
  accounts     accounts     @relation(fields: [username], references: [username], map: "UserreviewLike_username_fkey")

  @@id([itemReviewId, username])
  @@index([itemReviewId], map: "fk_UserReviewLike_items_review1_idx")
  @@index([username], map: "fk_UserReviewLike_users1_idx")
}

model accounts {
  userId        Int       @id @default(autoincrement())
  username      String    @unique(map: "username_UNIQUE") @db.VarChar(20)
  firstname     String?   @db.VarChar(50)
  lastname      String?   @db.VarChar(50)
  description   String?   @db.VarChar(500)
  email         String    @unique(map: "Users_email_key") @db.VarChar(50)
  password      String    @db.VarChar(100)
  role          String    @default("user") @db.VarChar(11)
  status        Boolean   @default(true)
  verifyAccount Boolean   @default(false)
  phone         String    @db.Char(11)
  createdAt     DateTime  @default(dbgenerated("NOW()"))
  updatedAt     DateTime? @default(dbgenerated("NOW()"))

  favprd            favprd[]
  items             items[]
  item_reviews      item_reviews[]
  item_review_likes item_review_likes[]
  addresses         addresses[]
  payments          payments[]
  item_events       item_events[]
  session_cart      session_cart[]
  orders            orders[]
  contents          contents[]
  gallery_comments  gallery_comments[]
  content_likes     content_likes[]
}

model addresses {
  addressId    String   @id @db.VarChar(53)
  username     String   @db.VarChar(20)
  accounts     accounts @relation(fields: [username], references: [username], map: "Addresses_username_fkey")
  addressname  String   @db.VarChar(100)
  phone        String   @db.Char(11)
  address      String   @db.VarChar(50)
  province     String   @db.VarChar(20)
  distrinct    String   @db.VarChar(20)
  subDistrinct String?  @db.VarChar(20)
  postalCode   String   @db.Char(5)
  isDefault    Boolean  @default(false)
}

model payments {
  paymentId   String   @id @db.VarChar(53)
  username    String   @db.VarChar(20)
  accounts    accounts @relation(fields: [username], references: [username], map: "Payments_username_fkey")
  bankname    String   @db.VarChar(100)
  bankCode    String   @db.VarChar(10)
  bankAccount String   @db.VarChar(16)
  isDefault   Boolean  @default(false)
}

model orders {
  orderId           String          @id @db.VarChar(53)
  customerName      String          @db.VarChar(20)
  accounts          accounts        @relation(fields: [customerName], references: [username], map: "Orders_customer_fkey")
  address           String          @db.VarChar(500)
  status            String          @db.VarChar(20)
  createdAt         DateTime        @default(dbgenerated("NOW()"))
  paidOrderDate     DateTime?
  shippedOrderDate  DateTime?
  receivedOrderDate DateTime?
  rateOrderDate     DateTime?
  order_details     order_details[]
}

model order_details {
  orderId   String   @db.VarChar(53)
  orders    orders   @relation(fields: [orderId], references: [orderId], map: "Order_details_fkey")
  itemStyle String   @db.VarChar(50)
  itemId    Int
  itemSize  String   @db.VarChar(50)
  items     items    @relation(fields: [itemId], references: [itemId], map: "Order_details_itemId_fkey")
  qtyOrder  Int      @default(1)
  priceEach Decimal  @default(0.00) @db.Decimal(32, 2)
  isReview  Boolean  @default(false)
  createdAt DateTime @default(dbgenerated("NOW()"))

  @@id([orderId, itemId])
  @@index([orderId], map: "fk_Order_details_idx")
  @@index([itemId], map: "fk_Order_details_items_idx")
}

model contents {
  contentId        Int                @id @default(autoincrement())
  name             String             @db.VarChar(100)
  description      String?            @db.VarChar(5000)
  contentOwner     String
  accounts         accounts           @relation(fields: [contentOwner], references: [username], map: "Contents_contentOwner_fkey")
  style            String             @db.VarChar(50)
  like             Int                @default(0)
  createdAt        DateTime           @default(dbgenerated("NOW()"))
  updatedAt        DateTime?          @default(dbgenerated("NOW()"))
  gallery_comments gallery_comments[]
  content_likes    content_likes[]

  @@index([contentOwner], map: "fk_contents_users1_idx")
}

model gallery_comments {
  commentId String   @id @db.VarChar(53)
  username  String   @db.VarChar(20)
  accounts  accounts @relation(fields: [username], references: [username], map: "GalleryComment_username_fkey")
  contentId Int
  contents  contents @relation(fields: [contentId], references: [contentId], map: "GalleryComment_contentId_fkey")
  comment   String   @db.VarChar(500)
  createdAt DateTime @default(dbgenerated("NOW()"))

  @@index([contentId], map: "fk_GalleryComment_commentId_idx")
}

model content_likes {
  username  String   @db.VarChar(20)
  contentId Int
  contents  contents @relation(fields: [contentId], references: [contentId], map: "ContentLike_contentId_fkey")
  accounts  accounts @relation(fields: [username], references: [username], map: "ContentLike_accounts_fkey")

  @@id([contentId, username])
  @@index([contentId], map: "fk_ContentLike_gallery_content1_idx")
  @@index([username], map: "fk_ContentLike_users1_idx")
}
